/*给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。
你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。
你可以按任意顺序返回答案。
Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].*/

#include <stdio.h>
#include <stdlib.h>
int* twoSum(int* nums, int numsSize, int target, int* returnSize);

int main(void)
{

 int nums[]={2,7,11,15};
 int target = 13;
int returnSize;
int* mallo_ret;
int numsSize  = sizeof(nums)/sizeof(int);

mallo_ret =   twoSum( nums,numsSize,target,&returnSize);

{
    printf("input nums:");
    for(int i;i< sizeof(nums)/sizeof(int);i++){
        printf("%d  ",nums[i]);
    }
    printf("\r\n");
}
   
printf("sum of target:%d\r\n",target);
   
printf("index:[%d,%d]",mallo_ret[0],mallo_ret[1]);

free(mallo_ret);
return 0;

}



int* twoSum(int* nums, int numsSize, int target, int* returnSize){
    int* ret;//动态分配内存，由调用者释放
    for(int i = 0;i<numsSize ;i++)
    {
        for(int j = i+1;j<numsSize ;j++)
        {
            if( nums[i]+nums[j] == target )
            {
                int* ret = malloc(2*sizeof(int));
                ret[0] = i;
                ret[1] = j;
                *returnSize = 2;
                return ret;
            }
        }
    }
   *returnSize = 0;
    return NULL;
}


